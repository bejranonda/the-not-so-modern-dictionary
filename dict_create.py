import speech_recognition as sr
from gtts import gTTS
import playsound
import os
import difflib
import random
import json

# ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
try:
    from database_politics import database  # ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
except ImportError:
    database = {}

# ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ
if os.path.exists("user_added_dict.json"):
    with open("user_added_dict.json", "r", encoding="utf-8") as f:
        user_db = json.load(f)
        database.update(user_db)

# ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ
flipping_sounds = [
    "flipping sound/pageturn-102978.mp3",
    "flipping sound/turning-book-pages-and-paper-flipping-sfx-177393.mp3",
    "flipping sound/book-page-flipping-6905.mp3"
]

invalid_sounds = [
    "error sound/error-call-to-attention-129258.mp3",
    "error sound/fail-234710.mp3",
    "error sound/pc-speaker-error-beep-104100.mp3"
]

correct_sound = "correct sound/correct-6033.mp3"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏π‡∏î
def speak_thai(text):
    playsound.playsound(correct_sound)
    flipping = random.choice(flipping_sounds)
    playsound.playsound(flipping)
    tts = gTTS(text=text, lang='th')
    tts.save("response.mp3")
    playsound.playsound("response.mp3")
    os.remove("response.mp3")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
def recognize_english():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á (EN)...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
        try:
            return recognizer.recognize_google(audio, language="en-US").lower()
        except:
            speak_thai("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ü‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à")
            return recognize_english()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
def recognize_thai():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ü‡∏±‡∏á (TH)...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
        try:
            return recognizer.recognize_google(audio, language="th-TH").lower()
        except:
            speak_thai("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ü‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à")
            return recognize_thai()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥
def search_word_flow():
    speak_thai("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
    word = recognize_english()
    possible_keys = list(database.keys())
    close_matches = difflib.get_close_matches(word, possible_keys, n=1, cutoff=0.1)

    if close_matches:
        match = close_matches[0]
        response = database[match]
    else:
        response = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°"

    speak_thai(f"‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ {word}: {response}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà
def add_new_word_flow():
    speak_thai("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°")
    word = recognize_english()
    speak_thai(f"‡∏Ñ‡∏∏‡∏ì‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ {word} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πà‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ ‡πÉ‡∏ä‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà")
    confirm = recognize_thai()
    if "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà" in confirm:
        speak_thai("‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return

    speak_thai(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ {word} ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢")
    meaning = recognize_thai()
    speak_thai(f"‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á {meaning} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞")
    confirm_meaning = recognize_thai()
    if "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà" in confirm_meaning:
        speak_thai("‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        return

    speak_thai(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏π‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ {word}")
    example = recognize_thai()
    full_text = f"{meaning} ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {example}"

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï database ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    database[word] = full_text

    # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    sorted_db = dict(sorted(database.items()))
    with open("user_added_dict.json", "w", encoding="utf-8") as f:
        json.dump(sorted_db, f, ensure_ascii=False, indent=2)

    # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏£‡∏∏‡∏õ (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå)
    print("\nüñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏£‡∏∏‡∏õ")
    print(f"‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå: {word}")
    print(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: {meaning}")
    print(f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {example}")
    print("------------------------")

    speak_thai(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ {word} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡πà‡∏∞")

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
def main_loop():
    while True:
        print("üöÄ Starting AI")
        speak_thai("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏û‡∏¥‡πà‡∏°")
        command = recognize_thai()
        if "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" in command:
            search_word_flow()
        elif "‡πÄ‡∏û‡∏¥‡πà‡∏°" in command:
            add_new_word_flow()
        else:
            invalid = random.choice(invalid_sounds)
            playsound.playsound(invalid)
            speak_thai("‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏π‡∏î‡∏ß‡πà‡∏≤ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏û‡∏¥‡πà‡∏°")

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
main_loop()
