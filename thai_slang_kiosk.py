# input_slang_kiosk.py

import sys
import json
import os
import random
from PyQt5.QtWidgets import (
    QApplication, QLabel, QLineEdit, QVBoxLayout,
    QWidget, QFrame
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPalette, QColor
from gtts import gTTS
from playsound import playsound
import speech_recognition as sr
import playsound
from datetime import datetime

from input_slang_utils import speak_thai, detect_motion
from slang_pdf_generator import printpdf

greeting_word = [
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏´‡∏°",
    "Hi ‡∏°‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°",
    "‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡∏±‡∏ô‡∏î‡∏µ‡∏°‡∏∞",
    "‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°",
    "‡∏°‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°",
]

correct_sound = "correct sound/correct-6033.mp3"
systemstart_sound = "systemstart sound/game-start-6104.mp3"
start_sound = "beep sound/point-smooth-beep-230573.mp3"
end_sound = "beep sound/short-beep-tone-47916.mp3"

ideal_warning = 30 * 1000 # mil.second to announce warning before reset
reset_warning = 60 * 1000 # mil.second to go to reset

class CustomLineEdit(QLineEdit):
    def __init__(self, parent):
        super().__init__(parent)
        self.kiosk = parent

    def keyPressEvent(self, event):
        self.kiosk.reset_idle_timer()
        if event.key() == Qt.Key_Escape and self.kiosk.step in [1, 2, 3, 4, 5]:
            self.kiosk.label.setText("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà...")
            playsound.playsound(end_sound)
            QTimer.singleShot(1000, self.kiosk.show_standby)
        elif self.kiosk.step == -1:
            self.kiosk.go_to_greeting()
        else:
            super().keyPressEvent(event)


class SlangKiosk(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üìö Your Thai Slang Dictionary - Kiosk Mode")
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.showFullScreen()
        self.data = {}
        self.step = -1
        self.warning_shown = False
        self.init_ui()

        self.motion_timer = QTimer()
        self.motion_timer.timeout.connect(self.check_motion)
        self.motion_timer.start(1000)

        self.idle_timer = QTimer()
        self.idle_timer.setInterval(ideal_warning)
        self.idle_timer.timeout.connect(self.handle_idle_timeout)

        self.warning_timer = QTimer()
        self.warning_timer.setInterval(reset_warning)
        self.warning_timer.timeout.connect(self.go_to_standby)

        QTimer.singleShot(500, self.show_standby)

    def reset_idle_timer(self):
        if self.step >= 0:
            self.idle_timer.stop()
            self.idle_timer.start()
            # ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï warning_timer ‡∏ã‡πâ‡∏≥
            if not self.warning_shown:
                self.warning_timer.stop()


    def init_ui(self):
        self.setStyleSheet("""
            QLabel#HeaderLabel {
                font-size: 48px;
                font-weight: bold;
                color: #ffffff;
            }
            QLabel#DescLabel {
                font-size: 24px;
                color: #dddddd;
            }
            QLineEdit {
                font-size: 36px;
                padding: 20px;
                border: 3px solid #0078d7;
                border-radius: 20px;
                background-color: #ffffff;
                color: #f5f5f5;
            }
        """)

        palette = QPalette()
        palette.setColor(QPalette.Window, QColor("#282c34"))
        self.setPalette(palette)

        self.layout = QVBoxLayout()
        self.layout.setSpacing(30)
        self.layout.setAlignment(Qt.AlignCenter)

        self.header = QLabel("üìò Your Thai Slang Dictionary")
        self.header.setObjectName("HeaderLabel")
        self.header.setAlignment(Qt.AlignCenter)

        self.description = QLabel("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡πÅ‡∏•‡∏á ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì üìù‚ú®")
        self.description.setObjectName("DescLabel")
        self.description.setAlignment(Qt.AlignCenter)

        self.frame = QFrame()
        self.frame.setStyleSheet("background-color: #3c4048; border-radius: 30px; padding: 50px;")
        self.frame_layout = QVBoxLayout()
        self.frame_layout.setAlignment(Qt.AlignCenter)

        self.label = QLabel("")
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setStyleSheet("font-size: 32px; color: white;")

        self.input = CustomLineEdit(self)
        self.input.returnPressed.connect(self.next_step)

        self.frame_layout.addWidget(self.label)
        self.frame_layout.addWidget(self.input)
        self.frame.setLayout(self.frame_layout)

        self.layout.addWidget(self.header)
        self.layout.addWidget(self.description)
        self.layout.addWidget(self.frame)
        self.setLayout(self.layout)
        self.input.setFocus()

    def show_standby(self):
        self.step = -1
        self.input.clear()
        greeting = random.choice(greeting_word)
        self.label.setText("üëã " + greeting + "\n\n‡∏Å‡∏î‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°")
        #self.setStyleSheet("QWidget { background-color: #103366; }")
        self.frame.setStyleSheet("background-color: #20232a; border-radius: 30px; padding: 50px;")
        QTimer.singleShot(100, lambda: speak_thai(random.choice(greeting_word)))
        self.idle_timer.stop()
        self.warning_timer.stop()

    def go_to_standby(self):
        self.label.setText("‚åõÔ∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
        playsound.playsound(end_sound)
        QTimer.singleShot(1000, self.show_standby) 

    def check_motion(self):
        if self.step == -1 and detect_motion():
            self.go_to_greeting()

    def handle_idle_timeout(self):
        if self.step == 0:
            self.go_to_standby()
        elif self.step >= 1:
            if not self.warning_shown:
                self.label.setText("‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                speak_thai("‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                self.warning_shown = True
                self.warning_timer.start()
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ input ‡∏ï‡πà‡∏≠ ‡∏Å‡πá‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ standby
                self.go_to_standby()

    def go_to_greeting(self):
        self.step = 0
        playsound.playsound(correct_sound)
        greeting = random.choice(greeting_word)
        #self.setStyleSheet("QWidget { background-color: #003366; }")
        self.frame.setStyleSheet("background-color: #004080; border-radius: 30px; padding: 50px;")
        self.label.setText(
            "<div style='font-size:40px;'>" + "üëã " + greeting + "<br><br>"
            "<span style='font-size:32px;'>‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡πÅ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏û‡∏à‡∏ô‡∏≤‡∏ô‡∏∏‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</span><br><br><br>"
            "<span style='font-size:40px;'>‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</span></div>"
        )
        print(f"- greeting: {greeting}")
        self.input.clear()
        QTimer.singleShot(100, lambda: speak_thai(greeting))
        #QTimer.singleShot(2000, lambda: speak_thai("‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏™‡πÅ‡∏•‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ"))
        self.reset_idle_timer()

    def go_to_word_input(self):
        self.step = 1
        self.input.clear()
        playsound.playsound(correct_sound)
        self.label.setText(
            "<div style='font-size:40px;'>üñäÔ∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡πÅ‡∏•‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter<br><br>"
            "<span style='font-size:32px;'>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô ‚Äò‡πÅ‡∏à‡πà‡∏°‡πÅ‡∏°‡∏ß‚Äô ‡∏´‡∏£‡∏∑‡∏≠ ‚Äò‡πÄ‡∏Å‡∏µ‡∏¢‡∏°‚Äô</span><br><br>"
            "<span style='font-size:28px;'>‡∏Å‡∏î Escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà</span></div>"
        )
        QTimer.singleShot(300, lambda: speak_thai("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡πÅ‡∏•‡∏á"))
        self.reset_idle_timer()

    def go_to_meaning_input(self):
        self.step = 2
        self.input.clear()
        self.label.setText(
            "<div style='font-size:40px;'>üìñ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter<br><br>"
            "<span style='font-size:28px;'>‡∏Å‡∏î Escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà</span></div>"
        )
        QTimer.singleShot(300, lambda: speak_thai("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢"))
        self.reset_idle_timer()

    def go_to_example_input(self):
        self.step = 3
        self.input.clear()
        self.label.setText(
            "<div style='font-size:40px;'>üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter<br><br>"
            "<span style='font-size:28px;'>‡∏Å‡∏î Escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà</span></div>"
        )
        QTimer.singleShot(300, lambda: speak_thai("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ"))
        self.reset_idle_timer()

    def go_to_summary(self):
        self.step = 4
        word = self.data["word"]
        meaning = self.data["meaning"]
        example = self.data["example"]
        summary = f"{word}\nüìñ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢: {meaning}\nüí¨ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {example}\n\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ Esc ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"
        print(f"- summary: {summary}")
        self.label.setText(summary)
        QTimer.singleShot(300, lambda: speak_thai(f"{word}  ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á {meaning}  ‡πÄ‡∏ä‡πà‡∏ô {example}"))
        self.reset_idle_timer()

    def go_to_print_option(self):
        self.step = 5
        self.input.clear()
        self.label.setText("üñ®Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏´‡∏°? (‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÉ‡∏ä‡πà' ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Esc ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°)")
        QTimer.singleShot(300, lambda: speak_thai("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÑ‡∏´‡∏°"))
        self.reset_idle_timer()

    def next_step(self):
        text = self.input.text().strip()
        print(f"- Step: {self.step}")
        if self.step == 0:
            self.go_to_word_input()
        elif self.step == 1:
            self.data["word"] = text
            self.go_to_meaning_input()
        elif self.step == 2:
            self.data["meaning"] = text
            self.go_to_example_input()
        elif self.step == 3:
            self.data["example"] = text
            self.go_to_summary()
        elif self.step == 4:
            self.save_data()
            self.go_to_print_option()
        elif self.step == 5:
            if text == "‡πÉ‡∏ä‡πà":
                printpdf(self.data["word"], self.data["meaning"], self.data["example"])
                self.label.setText("üñ®Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤...")
                QTimer.singleShot(3000, self.show_standby)
            else:
                self.show_standby()
        self.input.clear()
        self.reset_idle_timer()

    def keyPressEvent(self, event):
        self.reset_idle_timer()
        if self.step == 4 and event.key() == Qt.Key_Escape:
            self.label.setText("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà...")
            playsound.playsound(end_sound)
            QTimer.singleShot(1000, self.show_standby)
        elif self.step == 5 and event.key() == Qt.Key_Escape:
            self.show_standby()

    def save_data(self):
        filename = "output/user_added_slang.json"
        try:
            with open(filename, "r", encoding="utf-8") as f:
                db = json.load(f)
        except:
            db = {}

        word = self.data["word"]
        meaning = self.data["meaning"]
        example = self.data["example"]

        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        if word in db:
            entry = db[word]

            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
            if isinstance(entry["meaning"], list):
                entry["meaning"] = list(set(entry["meaning"] + [meaning]))
            else:
                entry["meaning"] = list(set([entry["meaning"], meaning]))

            # ‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
            if isinstance(entry["example"], list):
                entry["example"] = list(set(entry["example"] + [example]))
            else:
                entry["example"] = list(set([entry["example"], example]))

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° reach ‡πÅ‡∏•‡∏∞ update
            entry["reach"] = entry.get("reach", 0) + 1
            entry["update"] = now

            db[word] = entry
        else:
            db[word] = {
                "meaning": [meaning],
                "example": [example],
                "reach": 1,
                "update": now
            }

        with open(filename, "w", encoding="utf-8") as f:
            json.dump(dict(sorted(db.items())), f, ensure_ascii=False, indent=2)

def start_gui_and_get_entry():
    app = QApplication(sys.argv)
    kiosk = SlangKiosk()
    kiosk.show()
    sys.exit(app.exec_())
